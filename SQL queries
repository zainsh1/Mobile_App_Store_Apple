CREATE TABLE appleStore_description_combined AS

SELECT * FROM appleStore_description1

UNION ALL

SELECT * FROM appleStore_description2

UNION ALL

SELECT * FROM appleStore_description3

UNION ALL

SELECT * FROM appleStore_description4

** EDA *

-- check the number of unique apps in both tables applestoresAppleStore

SELECT * FROM appleStore_description_combined
SELECT * FROM AppleStore

SELECT COUNT(DISTINCT id) as UniqueAppIDs
FROM AppleStore

SELECT COUNT(DISTINCT id) as UniqueAppIDs
FROM appleStore_description_combined

-- Check for any missing values in key fields

SELECT COUNT(*) AS MissingValues
FROM AppleStore
WHERE track_name IS NULL or user_rating IS NULL or prime_genre is NULL

SELECT COUNT(*) AS MissingValues
FROM appleStore_description_combined
WHERE app_desc IS NULL

-- Find out number of apps per genre

SELECT prime_genre, COUNT(*) as Number_of_apps
FROM AppleStore
GROUP BY prime_genre
ORDER BY Number_of_apps desc

-- Get an overview of the apps' ratings

SELECT min(user_rating) as MinRating,
	   max(user_rating) as MaxRating,
       avg(user_rating) as avgRating
FROM AppleStore

** DATA ANALYSIS **

-- Determine whether paid apps have higher ratings than free apps

SELECT CASE
			WHEN price > 0 THEN 'Paid'
            ELSE 'Free'
          END as App_Type,
          avg(user_rating) as Avg_Rating
FROM AppleStore
GROUP BY App_Type
ORDER by App_Type desc

-- Check if apps with more support languages have higher ratings

SELECT CASE
			WHEN lang_num < 10 THEN '<10 Languages'
            WHEN lang_num BETWEEN 10 AND 30 THEN '10-30 Languages'
            ELSE '>30 Languages'  
            END as Language_bucket,
          	avg(user_rating) as Avg_Rating
FROM AppleStore
GROUP BY Language_bucket
ORDER by Avg_Rating desc

-- Check genres with low ratings

SELECT prime_genre, 
	   avg(user_rating) as Avg_Rating
FROM AppleStore
GROUP BY prime_genre
ORDER by Avg_Rating DESC
LIMIT 10

-- Check if there is a correlation between the length of the app description and user rating

SELECT CASE
			when length(b.app_desc) < 500 THEN 'Short'
            when length(b.app_desc) BETWEEN 500 AND 1000 THEN 'Medium'
            ELSE 'Long'
           END as description_length_bucket,
           avg(a.user_rating) as average_rating
FROM 
	AppleStore as a
JOIN
	appleStore_description_combined as b
ON
	a.id = b.id

GROUp by description_length_bucket
ORDER by average_rating DESC
    
-- Check the top-rated apps for each genre 
WITH CTE as
(
SELECT prime_genre,
	   track_name,
       user_rating,
       RANK() OVER (Partition BY prime_genre ORDER BY user_rating DESC, rating_count_tot DESC) as rank
FROM AppleStore
)
SELECT prime_genre,
	   track_name,
       user_rating
FROM CTE
WHERE rank = 1


